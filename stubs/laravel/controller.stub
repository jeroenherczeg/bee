<?php

namespace {{namespace}}\Http\Controllers;

use {{namespace}}\Http\Requests\{{TableName}}Request;
use {{namespace}}\Models\Eloquent\{{TableName}};
use {{namespace}}\Models\Transformers\{{TableName}}Transformer;

/**
 * Class {{TableName}}Controller
 * @package {{namespace}}\Http\Controllers
 */
class {{TableName}}Controller extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        ${{table_names}} = {{TableName}}::all();

        return $this->respondWithCollection(${{table_names}}, new {{TableName}}Transformer());
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param {{TableName}}Request $request
     * @return \Illuminate\Http\Response
     */
    public function store({{TableName}}Request $request)
    {
        ${{table_name}} = {{TableName}}::create($request->all());
        ${{table_name}}->fresh();

        return $this->respondWithCreatedItem(${{table_name}}, new {{TableName}}Transformer());
    }

    /**
     * Display the specified resource.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        ${{table_name}} = {{TableName}}::whereId($id)->first();

        if (!${{table_name}}) {
            return $this->respondWithErrorNotFound();
        }

        return $this->respondWithItem(${{table_name}}, new {{TableName}}Transformer());
    }

    /**
     * Update the specified resource in storage.
     *
     * @param {{TableName}}Request $request
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function update({{TableName}}Request $request, $id)
    {
        ${{table_name}} = {{TableName}}::whereId($id)->first();

        if (!${{table_name}}) {
            return $this->respondWithErrorNotFound();
        }

        ${{table_name}}->update($request->all());
        ${{table_name}}->fresh();

        return $this->respondWithItem(${{table_name}}, new {{TableName}}Transformer());
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroy($id)
    {
        ${{table_name}} = {{TableName}}::whereId($id)->first();

        if (!${{table_name}}) {
            return $this->respondWithErrorNotFound();
        }

        ${{table_name}}->delete();

        return $this->respondOk();
    }
}
